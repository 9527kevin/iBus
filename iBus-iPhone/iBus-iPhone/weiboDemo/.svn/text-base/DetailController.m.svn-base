//
//  DetailController.m
//  weiboDemo
//
//  Created by yanghua on 3/29/13.
//  Copyright (c) 2013 yanghua. All rights reserved.
//

#import "DetailController.h"

@interface DetailController ()

@property (nonatomic,retain) UIButton *relationshipBtn;

@property (nonatomic,retain) NSString *selectedUserId;

//Note:judge from me to current user
@property (nonatomic,assign) RelationshipEnum relationshipFromMetoUser;
@property (nonatomic,assign) RelationshipActionEnum relationshipAction;

@end

@implementation DetailController

- (void)dealloc{
    [super dealloc];
    
    [_selectedUserId release],_selectedUserId=nil;
}

- (id)initWithUserId:(NSString *)userId{
    self=[super init];
    if (self) {
        _selectedUserId=[userId retain];
    }
    
    return self;
}

- (void)loadView{
    [super loadView];
    
    [self layoutSubViews];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	[self sendRequest4RelationshipFrom:Default_UserId to:self.selectedUserId];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}



#pragma  mark - override methods -
- (void)layoutSubViews{
    [super layoutSubViews];
    
    self.view=[[[UIView alloc] initWithFrame:Default_TableView_Frame] autorelease];
    
    //buttons
    _relationshipBtn=[UIButton buttonWithType:UIButtonTypeRoundedRect];
    self.relationshipBtn.frame=Relationship_Frame;
    self.relationshipBtn.titleLabel.font=[UIFont systemFontOfSize:Relationship_FontSize];
    [self.relationshipBtn setTitleColor:[UIColor blackColor]
                               forState:UIControlStateNormal];
    [self.relationshipBtn setTitle:Relationship_Placeholder_Str
                          forState:UIControlStateNormal];
    
    //add event
    [self.relationshipBtn addTarget:self
                             action:@selector(relationshipButton_touchUpInside:)
                   forControlEvents:UIControlEventTouchUpInside];
    
    [self.view addSubview:self.relationshipBtn];
}

#pragma mark - events definition -
- (void)relationshipButton_touchUpInside:(id)sender{
    //from follow
    self.relationshipFromMetoUser=followed;
    
    //from fans
//    self.relationshipFromMetoUser=fans;
    [self sendRelationshipChangeAction];
}

#pragma mark - relationship change action -
/**
 *change relationship action
 */
- (void)sendRelationshipChangeAction{
    NSURL *requestUrl=nil;
    ASIFormDataRequest *postRequest;
    switch (self.relationshipFromMetoUser) {
        case followed:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:unFollow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:self.selectedUserId
                               forKey:Url_Unfollow_Param_unFollowUserIds];
            self.relationshipAction=unFollow;
        }
            break;
            
        case fans:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:follow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:self.selectedUserId
                           forKey:Url_Follow_Param_followingIds];
            self.relationshipAction=follow;
        }
            break;
            
        case friends:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:unFollow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:self.selectedUserId
                           forKey:Url_Unfollow_Param_unFollowUserIds];
            self.relationshipAction=unFollow;
        }
            break;
            
        default:
            break;
    }
    
    postRequest.delegate=self;
    postRequest.tag=RelationshipChangeAction;
    [postRequest startAsynchronous];
    
}

- (NSURL*)getUrl4RelationshipChangeAction:(RelationshipActionEnum)actionEnum{
    NSURL *result=nil;
    NSString *urlStr;
    switch (actionEnum) {
        case follow:{
            urlStr=[NSString stringWithFormat:
                                                Url_Follow,
                                                Url_Base,
                                                Default_UserId];
        }
            break;
            
        case unFollow:{
            urlStr=[NSString stringWithFormat:
                                                Url_Unfollow,
                                                Url_Base,
                                                Default_UserId];
        }
            break;
            
        case other:{
            
        }
            break;
            
        default:
            break;
    }
    
    result=[NSURL URLWithString:urlStr];
    
    return result;
}

#pragma mark - relationship info -
/**
 *load relationship
 */
- (void)sendRequest4RelationshipFrom:(NSString*)hostUserId
                                  to:(NSString*)userId{
    ASIHTTPRequest *request=[ASIHTTPRequest requestWithURL:nil];
    
    request.tag=relationshipInfo;
}

#pragma mark - ASIHttpRequestDelegate
- (void)request:(ASIHTTPRequest *)request
 didReceiveData:(NSData *)data{
    if (!data) {
        NSLog(@"%@",@"error");
        return;
    }
    
    NSString *responseStr=[[[NSString alloc] initWithData:data
                                                 encoding:NSUTF8StringEncoding]
                           autorelease];
    
    NSLog(@"-----------%@",responseStr);
    
    NSDictionary *responseDic=[NSJSONSerialization
                               JSONObjectWithData:data
                               options:NSJSONReadingMutableContainers
                               error:nil];
    
    if (!responseDic) {
        NSLog(@"%@",@"error");
        return;
    }
    
    RequestEnum currentRequestCategory=(RequestEnum)request.tag;
    
    switch (currentRequestCategory) {
        case relationshipInfo:
            //reset relationship
            
            
            break;
            
        case RelationshipChangeAction:
        {
            if ([responseDic[@"statusCode"] intValue]==100000) {
                NSLog(@"%@",@"状态修改成功");
                [self afterRelationshipChangeAction:responseDic];
            }
        }
            
            break;
            
        case detailInfo:
            
            break;
            
        case weiboList:
            
            break;
            
        default:
            break;
    }
}


#pragma mark - request successful callback methods -
- (void)afterRelationshipChangeAction:(NSDictionary*)responseDic{
    //change relationship button
    switch (self.relationshipAction) {
        case unFollow:{
            [self.relationshipBtn setTitle:@"加关注" forState:UIControlStateNormal];
            
        }
            break;
            
        case follow:{
            [self.relationshipBtn setTitle:@"取消关注" forState:UIControlStateNormal];
        }
            break;
            
        default:
            break;
    }
        
}



@end
