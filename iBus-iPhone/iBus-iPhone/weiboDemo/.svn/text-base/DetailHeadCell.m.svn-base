//
//  DetailHeadCell.m
//  weiboDemo
//
//  Created by yanghua on 3/29/13.
//  Copyright (c) 2013 yanghua. All rights reserved.
//

#import "DetailHeadCell.h"

@interface DetailHeadCell ()

@property (nonatomic,retain) UIButton *relationshipBtn;
@property (nonatomic,retain) UIImageView *headImgView;
@property (nonatomic,retain) UIImageView *sexIconImgView;
@property (nonatomic,retain) UILabel *descLbl;
@property (nonatomic,retain) UILabel *nickLbl;
@property (nonatomic,retain) NSIndexPath *indexPath;
@property (nonatomic,assign) RelationshipEnum relationshipFromMetoUser;
@property (nonatomic,copy) NSString *userId;

@end

@implementation DetailHeadCell

-(void)dealloc{
    [super dealloc];
    
    [_headImgView release],_headImgView=nil;
    [_sexIconImgView release],_sexIconImgView=nil;
    [_descLbl release],_descLbl=nil;
    [_nickLbl release],_nickLbl=nil;
    [_indexPath release],_indexPath=nil;
    
    [_userId release],_userId=nil;
}

- (id)initWithStyle:(UITableViewCellStyle)style
    reuseIdentifier:(NSString *)reuseIdentifier
             userId:(NSString*)userId
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        
        _userId=[userId retain];
        
        //head image
        _headImgView=[[UIImageView alloc] initWithFrame:HeadImgView_Frame];
        _headImgView.image=[UIImage imageNamed:@"middleHeadImgPlaceHolder.png"];
        [self addSubview:_headImgView];
        //usage for icondownloader 
        _indexPath=[[NSIndexPath alloc] initWithIndex:0];
        
        //nick name
        _nickLbl=[[UILabel alloc] initWithFrame:NickLbl_Frame];
        _nickLbl.text=@"";
        _nickLbl.textColor=[UIColor blackColor];
        _nickLbl.font=[UIFont systemFontOfSize:NickLbl_Font_Size];
        [self addSubview:_nickLbl];
        
        //sex icon
        _sexIconImgView=[[UIImageView alloc] initWithFrame:CGRectZero]; //zero
        _sexIconImgView.image=[UIImage imageNamed:@"iconMale.png"];
        [self addSubview:_sexIconImgView];
        
        //relation button
        _relationshipBtn=[UIButton buttonWithType:UIButtonTypeRoundedRect];
        _relationshipBtn.frame=Relationship_Frame;
        _relationshipBtn.titleLabel.font=[UIFont systemFontOfSize:Relationship_FontSize];
        [_relationshipBtn setTitleColor:[UIColor blackColor]
                               forState:UIControlStateNormal];
        [_relationshipBtn setTitle:Relationship_Placeholder_Str
                          forState:UIControlStateNormal];
        
        [_relationshipBtn addTarget:self
                             action:@selector(relationshipButton_touchUpInside:)
                   forControlEvents:UIControlEventTouchUpInside];
        
        [self addSubview:_relationshipBtn];
        
        //desc
        _descLbl=[[UILabel alloc] initWithFrame:DescLbl_Frame];
        _descLbl.textColor=[UIColor blackColor];
        _descLbl.font=[UIFont systemFontOfSize:DescLbl_Font_Size];
        [self addSubview:_descLbl];
        
        [self sendRequest4GetUserDetail:self.userId];
        [self sendRequest4GetRelationship:self.userId];
    }
    
    return self;
}

#pragma mark - events definition -
- (void)relationshipButton_touchUpInside:(id)sender{
    [self sendRelationshipChangeActionWith:self.userId];
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/

#pragma mark - private methods -
- (void)sendRequest4GetUserDetail:(NSString*)userId{
    NSURL *requestUrl=[NSURL URLWithString:[NSString stringWithFormat:
                                            Url_UserDetail,
                                            Url_Base,
                                            userId]];
    
    __block ASIHTTPRequest *request=[ASIHTTPRequest requestWithURL:requestUrl];
    [request setCompletionBlock:^{
        NSData *responseData = [request responseData];
        
        NSDictionary *responseDic=[NSJSONSerialization JSONObjectWithData:responseData
                                                                  options:NSJSONReadingMutableContainers error:nil];
        
        //success
        if ([responseDic[@"statusCode"] intValue]==Status_Success) {
            NSDictionary *userDetail=responseDic[@"data"];
            
            //head image
            self.imageDownloadsInProgress=[NSMutableDictionary dictionary];
            [self startIconDownload:userDetail[@"imgUrl"]
                       forIndexPath:self.indexPath
                           withSize:HeadImgView_Size];
            
            self.appImageDownloadCompleted=^(NSIndexPath* indexPath){
                IconDownloader *iconDownloader=nil;
                iconDownloader=[self.imageDownloadsInProgress objectForKey:self.indexPath];
                if (iconDownloader) {
                    self.headImgView.image=iconDownloader.appIcon;
                }
            };
            
            //nick name
            NSString *userName=userDetail[@"userName"];
            self.nickLbl.text=userName;
            CGFloat nickNameWidth=[GlobalInstance getWidthWithText:userName
                            font:[UIFont systemFontOfSize:NickLbl_Font_Size]];
            self.nickLbl.frame=CGRectMake(self.nickLbl.frame.origin.x, self.nickLbl.frame.origin.y, nickNameWidth, self.nickLbl.frame.size.height);
            
            //sex
            NSString *sexCode=userDetail[@"sex"];
            CGFloat sexIcon_x=self.nickLbl.frame.origin.x+nickNameWidth+3.0f;
            self.sexIconImgView.frame=CGRectMake(sexIcon_x, 13, Sex_Icon_Width, Sex_Icon_Height);
            if ([sexCode isEqualToString:@"1"]) {
                self.sexIconImgView.image=[UIImage imageNamed:@"iconMale.png"];
            }else{
                self.sexIconImgView.image=[UIImage imageNamed:@"iconFeMale.png"];
            }
            
            //desc
            if (userDetail[@"description"]==[NSNull null]) {
                self.descLbl.text=@"简介:暂无";
            }else{
                self.descLbl.text=userDetail[@"description"];
            }
            
        }
    }];
    
    [request startAsynchronous];
}

- (void)sendRequest4GetRelationship:(NSString*)relationWithUserId{
    NSURL *requestUrl=[NSURL URLWithString:[NSString stringWithFormat:
                                            Url_Relationship,
                                            Url_Base,
                                            Default_UserId,
                                            relationWithUserId]];
        
    __block ASIHTTPRequest *request=[ASIHTTPRequest requestWithURL:requestUrl];
    [request setCompletionBlock:^{
        NSData *responseData = [request responseData];
        
        NSDictionary *responseDic=[NSJSONSerialization JSONObjectWithData:responseData
                                                                  options:NSJSONReadingMutableContainers error:nil];
        
        //success
        if ([responseDic[@"statusCode"] intValue]==Status_Success) {
            int relationshipCode=[responseDic[@"data"] intValue];
            switch (relationshipCode) {
                case followedCode:                  //已关注
                {
                    [self.relationshipBtn setTitle:@"取消关注"
                                          forState:UIControlStateNormal];
                    self.relationshipFromMetoUser=followed;
                }
                    break;
                    
                case unFollowCode:                  //未关注
                {
                    [self.relationshipBtn setTitle:@"加关注"
                                          forState:UIControlStateNormal];
                    self.relationshipFromMetoUser=unFollowed;
                }
                    break;
                    
                case followedEachother:             //互相关注
                {
                    [self.relationshipBtn setTitle:@"取消关注"
                                          forState:UIControlStateNormal];
                    self.relationshipFromMetoUser=friends;
                }
                    break;
                    
                default:
                    break;
            }
        }
    }];
    
    [request startAsynchronous];
}

/**
 *change relationship action
 */
- (void)sendRelationshipChangeActionWith:(NSString*)userId{
    NSURL *requestUrl=nil;
    __block ASIFormDataRequest *postRequest;
    switch (self.relationshipFromMetoUser) {
        case followed:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:unFollow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:userId
                               forKey:Url_Unfollow_Param_unFollowUserIds];
        }
            break;
            
        case unFollowed:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:follow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:userId
                               forKey:Url_Follow_Param_followingIds];
        }
            break;
            
        case friends:
        {
            requestUrl=[self getUrl4RelationshipChangeAction:unFollow];
            postRequest=[ASIFormDataRequest requestWithURL:requestUrl];
            [postRequest setPostValue:userId
                               forKey:Url_Unfollow_Param_unFollowUserIds];
        }
            break;
            
        default:
            postRequest=nil;
            break;
    }
    
    if (!postRequest) {
        return;
    }
    
    [postRequest setCompletionBlock:^{
        //change relationship from me to user after change action
        switch (self.relationshipFromMetoUser) {
            case followed:                      //followed - > unfollowed
            {
                self.relationshipFromMetoUser=unFollowed;
                [self.relationshipBtn setTitle:@"加关注"
                                      forState:UIControlStateNormal];
            }
                break;
                
            case unFollowed:                    //unfollowed - > followed
            {
                self.relationshipFromMetoUser=followed;
                [self.relationshipBtn setTitle:@"取消关注"
                                      forState:UIControlStateNormal];
            }
                
                break;
                
            case friends:                       //friends    - >unfollowed
            {
                self.relationshipFromMetoUser=unFollowed;
                [self.relationshipBtn setTitle:@"加关注"
                                      forState:UIControlStateNormal];
            }
                
                break;
                
            default:
                break;
        }
        
    }];
    

    [postRequest startAsynchronous];
    
}

- (NSURL*)getUrl4RelationshipChangeAction:(RelationshipActionEnum)actionEnum{
    NSURL *result=nil;
    NSString *urlStr=nil;
    switch (actionEnum) {
        case follow:{
            urlStr=[NSString stringWithFormat:
                    Url_Follow,
                    Url_Base,
                    Default_UserId];
        }
            break;
            
        case unFollow:{
            urlStr=[NSString stringWithFormat:
                    Url_Unfollow,
                    Url_Base,
                    Default_UserId];
        }
            break;
            
        default:
            break;
    }
    
    result=[NSURL URLWithString:urlStr];
    
    return result;
}



@end
